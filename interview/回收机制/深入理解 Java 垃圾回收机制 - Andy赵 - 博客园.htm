<!DOCTYPE html>
<!-- saved from url=(0046)http://www.cnblogs.com/andy-zcx/p/5522836.html -->
<html lang="zh-cn"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<meta name="viewport" content="width=device-width, initial-scale=1">
<title>深入理解 Java 垃圾回收机制 - Andy赵 - 博客园</title>
<link type="text/css" rel="stylesheet" href="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/blog-common.css">
<link id="MainCss" type="text/css" rel="stylesheet" href="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/bundle-BlueSky.css">
<link id="mobile-style" media="only screen and (max-width: 768px)" type="text/css" rel="stylesheet" href="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/bundle-BlueSky-mobile.css">
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/andy-zcx/rss">
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/andy-zcx/rsd.xml">
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/andy-zcx/wlwmanifest.xml">
<script async="" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/analytics.js"></script><script src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'andy-zcx', cb_enable_mathjax=false;var isLogined=false;</script>
<script src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/blog-common.js" type="text/javascript"></script>
<style type="text/css">
:root #header + #content > #left > #rlblock_left
{ display: none !important; }</style></head>
<body>
<a name="top"></a>

<!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
	<a id="lnkBlogLogo" href="http://www.cnblogs.com/andy-zcx/"><img id="blogLogo" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/logo.gif" alt="返回主页"></a>			
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/andy-zcx/">Andy赵</a></h1>
<h2></h2>



		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="http://www.cnblogs.com/">博客园</a></li>
<li><a id="blog_nav_myhome" class="menu" href="http://www.cnblogs.com/andy-zcx/">首页</a></li>
<li><a id="blog_nav_newpost" class="menu" rel="nofollow" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li><a id="blog_nav_contact" class="menu" rel="nofollow" href="https://msg.cnblogs.com/send/Andy%E8%B5%B5">联系</a></li>
<li><a id="blog_nav_rss" class="menu" href="http://www.cnblogs.com/andy-zcx/rss">订阅</a>
<!--<a id="blog_nav_rss_image" class="aHeaderXML" href="http://www.cnblogs.com/andy-zcx/rss"><img src="//www.cnblogs.com/images/xml.gif" alt="订阅" /></a>--></li>
<li><a id="blog_nav_admin" class="menu" rel="nofollow" href="https://i.cnblogs.com/">管理</a></li>
</ul>
		<div class="blogStats">
			
			<div id="blog_stats">
<span id="stats_post_count">随笔 - 2&nbsp; </span>
<span id="stats_article_count">文章 - 0&nbsp; </span>
<span id="stats-comment_count">评论 - 0</span>
</div>
			
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->

<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		
<div id="post_detail">
<!--done-->
<div id="topics">
	<div class="post">
		<h1 class="postTitle">
			<a id="cb_post_title_url" class="postTitle2" href="http://www.cnblogs.com/andy-zcx/p/5522836.html">深入理解 Java 垃圾回收机制</a>
		</h1>
		<div class="clear"></div>
		<div class="postBody">
			<div id="cnblogs_post_body"><p>&nbsp;</p>
<div class="header-wrapper">
<div id="logo" class="leaderboard-true">&nbsp;</div>
</div>
<div class="menu-main-container">&nbsp;</div>
<div class="clear">&nbsp;</div>
<div class="clear">&nbsp;</div>
<div class="grid-8">
<div id="post-16173" class="post-16173 post type-post status-publish format-standard hentry category-basic tag-575 odd">
<div class="entry-header">
<h1>深入理解 Java 垃圾回收机制</h1>
</div>
<div class="entry-meta">
<p><strong>一：垃圾回收机制的意义</strong></p>
<p>java &nbsp;语言中一个显著的特点就是引入了java回收机制，是c++程序员最头疼的内存管理的问题迎刃而解，它使得java程序员在编写程序的时候不在考虑内存管理。由于有个垃圾回收机制，java中的额对象不在有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存；</p>
<p>&nbsp;内存泄露：指该内存空间使用完毕后未回收，在不涉及复杂数据结构的一般情况下，java的内存泄露表现为一个内存对象的生命周期超出了程序需要它的时间长度，我们有是也将其称为“对象游离”；</p>
<p>二：垃圾回收机制的算法</p>
<p>java语言规范没有明确的说明JVM 使用哪种垃圾回收算法，但是任何一种垃圾回收算法一般要做两件基本事情：（1）发现无用的信息对象；（2）回收将无用对象占用的内存空间。使该空间可被程序再次使用。</p>
<p>1。引用计数法（Reference Counting Collector）</p>
<p>&nbsp; &nbsp; &nbsp;1.1:算法分析：</p>
<p>&nbsp; &nbsp; &nbsp; 引用计数算法是垃圾回收器中的早起策略，在这种方法中，堆中的每个对象实例都有一个引用计数器，点一个对象被创建时，且该对象实例分配给一个变量，该变量计数设置为1 ，当任何其他变量赋值为这个对象的引用时，计数加1 ，（a=b ，则b引用的对象实例计数器+1）但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1，任何引用计数器为0 的对象实例可以当做垃圾收集。 当一个对象的实例被垃圾收集是，它引用的任何对象实例的引用计数器减1.</p>
</div>
<div class="entry">
<h2>一、垃圾回收机制的意义</h2>
<p>Java语言中一个显著的特点就是引入了垃圾回收机制，使c++程序员最头疼的内存管理的问题迎刃而解，它使得Java程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java中的对象不再有“作用域”的概念，只有对象的引用才有“作用域”。垃圾回收可以有效的防止内存泄露，有效的使用空闲的内存。</p>
<p>ps:内存泄露是指该内存空间使用完毕之后未回收，在不涉及复杂数据结构的一般情况下，Java&nbsp;的内存泄露表现为一个内存对象的生命周期超出了程序需要它的时间长度，我们有时也将其称为“对象游离”。</p>
<h2>二、垃圾回收机制中的算法</h2>
<p>Java语言规范没有明确地说明JVM使用哪种垃圾回收算法，但是任何一种垃圾回收算法一般要做2件基本的事情：（1）发现无用信息对象；（2）回收被无用对象占用的内存空间，使该空间可被程序再次使用。</p>
<p><strong>1.引用计数法(Reference Counting Collector)</strong></p>
<p>1.1算法分析</p>
<p>引用计数是垃圾收集器中的早期策略。在这种方法中，堆中每个对象实例都有一个引用计数。当一个对象被创建时，且将该对象实例分配给一个变量，该变量计数设置为1。当任何其它变量被赋值为这个对象的引用时，计数加1（a&nbsp;=&nbsp;b,则b引用的对象实例的计数器+1），但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1。任何引用计数器为0的对象实例可以被当作垃圾收集。当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减1。</p>
<p>1.2优缺点</p>
<p>优点：</p>
<p>引用计数收集器可以很快的执行，交织在程序运行中。对程序需要不被长时间打断的实时环境比较有利。</p>
<p>缺点：</p>
<p>无法检测出循环引用。如父对象有一个对子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不可能为0.</p>
<p>1.3引用计数算法无法解决循环引用问题，例如：</p>
<div>
<div id="highlighter_785401" class="syntaxhighlighter notranslate java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
<div class="line number8 index7 alt1">8</div>
<div class="line number9 index8 alt2">9</div>
<div class="line number10 index9 alt1">10</div>
<div class="line number11 index10 alt2">11</div>
<div class="line number12 index11 alt1">12</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java keyword">public</code> <code class="java keyword">class</code> <code class="java plain">Main {</code></div>
<div class="line number2 index1 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java keyword">public</code> <code class="java keyword">static</code> <code class="java keyword">void</code> <code class="java plain">main(String[] args) {</code></div>
<div class="line number3 index2 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MyObject object1 = </code><code class="java keyword">new</code> <code class="java plain">MyObject();</code></div>
<div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">MyObject object2 = </code><code class="java keyword">new</code> <code class="java plain">MyObject();</code></div>
<div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">object1.object = object2;</code></div>
<div class="line number7 index6 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">object2.object = object1;</code></div>
<div class="line number8 index7 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>&nbsp;</div>
<div class="line number9 index8 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">object1 = </code><code class="java keyword">null</code><code class="java plain">;</code></div>
<div class="line number10 index9 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">object2 = </code><code class="java keyword">null</code><code class="java plain">;</code></div>
<div class="line number11 index10 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">}</code></div>
<div class="line number12 index11 alt1"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>最后面两句将object1和object2赋值为null，也就是说object1和object2指向的对象已经不可能再被访问，但是由于它们互相引用对方，导致它们的引用计数器都不为0，那么垃圾收集器就永远不会回收它们。</p>
<p><strong>2.tracing算法(Tracing Collector) 或&nbsp;标记-清除算法(mark and sweep)</strong></p>
<p>2.1根搜索算法</p>
<p><iframe id="iframe_0.11312900765401546" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource.html" style="border: none; width: 690px; height: 349px;" frameborder="0" scrolling="no"></iframe></p>
<p>根搜索算法是从离散数学中的图论引入的，程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。</p>
<p>java中可作为GC Root的对象有</p>
<p>1.虚拟机栈中引用的对象（本地变量表）</p>
<p>2.方法区中静态属性引用的对象</p>
<p>3.&nbsp;方法区中常量引用的对象</p>
<p>4.本地方法栈中引用的对象（Native对象）</p>
<p><strong>2.2tracing算法的示意图</strong></p>
<p><iframe id="iframe_0.27977077723846056" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource(1).html" style="border: none; width: 558px; height: 459px;" frameborder="0" scrolling="no"></iframe></p>
<p><strong>2.3标记-清除算法分析</strong></p>
<p>标记-清除算法采用从根集合进行扫描，对存活的对象对象标记，标记完毕后，再扫描整个空间中未被标记的对象，进行回收，如上图所示。标记-清除算法不需要进行对象的移动，并且仅对不存活的对象进行处理，在存活对象比较多的情况下极为高效，但由于标记-清除算法直接回收不存活的对象，因此会造成内存碎片。</p>
<p><strong>3.compacting算法 或&nbsp;标记-整理算法</strong></p>
<p><iframe id="iframe_0.04787467296689529" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource(2).html" style="border: none; width: 610px; height: 583px;" frameborder="0" scrolling="no"></iframe></p>
<p>标记-整理算法采用标记-清除算法一样的方式进行对象的标记，但在清除时不同，在回收不存活的对象占用的空间后，会将所有的存活对象往左端空闲空间移动，并更新对应的指针。标记-整理算法是在标记-清除算法的基础上，又进行了对象的移动，因此成本更高，但是却解决了内存碎片的问题。在基于Compacting算法的收集器的实现中，一般增加句柄和句柄表。</p>
<p><strong>4.copying算法(Compacting Collector)</strong></p>
<p><iframe id="iframe_0.9220247448487919" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource(3).html" style="border: none; width: 579px; height: 309px;" frameborder="0" scrolling="no"></iframe></p>
<p>该算法的提出是为了克服句柄的开销和解决堆碎片的垃圾回收。它开始时把堆分成&nbsp;一个对象&nbsp;面和多个空闲面，&nbsp;程序从对象面为对象分配空间，当对象满了，基于copying算法的垃圾&nbsp;收集就从根集中扫描活动对象，并将每个&nbsp;活动对象复制到空闲面(使得活动对象所占的内存之间没有空闲洞)，这样空闲面变成了对象面，原来的对象面变成了空闲面，程序会在新的对象面中分配内存。一种典型的基于coping算法的垃圾回收是stop-and-copy算法，它将堆分成对象面和空闲区域面，在对象面与空闲区域面的切换过程中，程序暂停执行。</p>
<p><strong>5.generation算法(Generational Collector)</strong></p>
<p><iframe id="iframe_0.33803599652768135" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource(4).html" style="border: none; width: 563px; height: 308px;" frameborder="0" scrolling="no"></iframe></p>
<p>分代的垃圾回收策略，是基于这样一个事实：<strong>不同的对象的生命周期是不一样的</strong>。因此，不同生命周期的对象可以采取不同的回收算法，以便提高回收效率。</p>
<p><strong>年轻代（Young Generation）</strong></p>
<p>1.所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。</p>
<p>2.新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区，此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空，&nbsp;如此往复。</p>
<p>3.当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收</p>
<p>4.新生代发生的GC也叫做Minor GC，MinorGC发生频率比较高(不一定等Eden区满了才触发)</p>
<p><strong>年老代（Old Generation）</strong></p>
<p>1.在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p>
<p>2.内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。</p>
<p><strong>持久代（Permanent Generation）</strong></p>
<p>用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。</p>
<h2>三.GC（垃圾收集器）</h2>
<p>新生代收集器使用的收集器：Serial、PraNew、Parallel Scavenge</p>
<p>老年代收集器使用的收集器：Serial Old、Parallel Old、CMS</p>
<p><iframe id="iframe_0.7773588126577133" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/saved_resource(5).html" style="border: none; width: 508px; height: 527px;" frameborder="0" scrolling="no"></iframe></p>
<p><strong>Serial收集器（复制算法)</strong></p>
<p>新生代单线程收集器，标记和清理都是单线程，优点是简单高效。</p>
<p><strong>Serial Old收集器(标记-整理算法)</strong></p>
<p>老年代单线程收集器，Serial收集器的老年代版本。</p>
<p><strong>ParNew收集器(停止-复制算法)　</strong></p>
<p>新生代收集器，可以认为是Serial收集器的多线程版本,在多核CPU环境下有着比Serial更好的表现。</p>
<p><strong>Parallel&nbsp;Scavenge收集器(停止-复制算法)</strong></p>
<p>并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%，&nbsp;吞吐量=&nbsp;用户线程时间/(用户线程时间+GC线程时间)。适合后台应用等对交互相应要求不高的场景。</p>
<p><strong>Parallel&nbsp;Old收集器(停止-复制算法)</strong></p>
<p>Parallel&nbsp;Scavenge收集器的老年代版本，并行收集器，吞吐量优先</p>
<p><strong>CMS(Concurrent&nbsp;Mark&nbsp;Sweep)收集器（标记-清理算法）</strong></p>
<p>高并发、低停顿，追求最短GC回收停顿时间，cpu占用比较高，响应时间快，停顿时间短，多核cpu&nbsp;追求高响应时间的选择</p>
<h2>四、GC的执行机制</h2>
<p>由于对象进行了分代处理，因此垃圾回收区域、时间也不一样。GC有两种类型：Scavenge GC和Full GC。</p>
<p><strong>Scavenge GC</strong></p>
<p>一般情况下，当新对象生成，并且在Eden申请空间失败时，就会触发Scavenge GC，对Eden区域进行GC，清除非存活对象，并且把尚且存活的对象移动到Survivor区。然后整理Survivor的两个区。这种方式的GC是对年轻代的Eden区进行，不会影响到年老代。因为大部分对象都是从Eden区开始的，同时Eden区不会分配的很大，所以Eden区的GC会频繁进行。因而，一般在这里需要使用速度快、效率高的算法，使Eden去能尽快空闲出来。</p>
<p><strong>Full GC</strong></p>
<p>对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个堆进行回收，所以比Scavenge GC要慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于FullGC的调节。有如下原因可能导致Full GC：</p>
<p>1.年老代（Tenured）被写满</p>
<p>2.持久代（Perm）被写满</p>
<p>3.System.gc()被显示调用</p>
<p>4.上一次GC之后Heap的各域分配策略动态变化</p>
<h2>五、Java有了GC同样会出现内存泄露问题</h2>
<p>1.静态集合类像HashMap、Vector等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，所有的对象Object也不能被释放，因为他们也将一直被Vector等应用着。</p>
<div>
<div id="highlighter_276379" class="syntaxhighlighter notranslate java">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td class="gutter">
<div class="line number1 index0 alt2">1</div>
<div class="line number2 index1 alt1">2</div>
<div class="line number3 index2 alt2">3</div>
<div class="line number4 index3 alt1">4</div>
<div class="line number5 index4 alt2">5</div>
<div class="line number6 index5 alt1">6</div>
<div class="line number7 index6 alt2">7</div>
</td>
<td class="code">
<div class="container">
<div class="line number1 index0 alt2"><code class="java plain">Static Vector v = </code><code class="java keyword">new</code> <code class="java plain">Vector(); </code></div>
<div class="line number2 index1 alt1"><code class="java keyword">for</code> <code class="java plain">(</code><code class="java keyword">int</code> <code class="java plain">i = </code><code class="java value">1</code><code class="java plain">; i&lt;</code><code class="java value">100</code><code class="java plain">; i++) </code></div>
<div class="line number3 index2 alt2"><code class="java plain">{ </code></div>
<div class="line number4 index3 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">Object o = </code><code class="java keyword">new</code> <code class="java plain">Object(); </code></div>
<div class="line number5 index4 alt2"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">v.add(o); </code></div>
<div class="line number6 index5 alt1"><code class="java spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="java plain">o = </code><code class="java keyword">null</code><code class="java plain">; </code></div>
<div class="line number7 index6 alt2"><code class="java plain">}</code></div>
</div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>在这个例子中，代码栈中存在Vector&nbsp;对象的引用&nbsp;v&nbsp;和&nbsp;Object&nbsp;对象的引用&nbsp;o&nbsp;。在&nbsp;For&nbsp;循环中，我们不断的生成新的对象，然后将其添加到&nbsp;Vector&nbsp;对象中，之后将&nbsp;o&nbsp;引用置空。问题是当&nbsp;o&nbsp;引用被置空后，如果发生&nbsp;GC，我们创建的&nbsp;Object&nbsp;对象是否能够被&nbsp;GC&nbsp;回收呢？答案是否定的。因为，&nbsp;GC&nbsp;在跟踪代码栈中的引用时，会发现&nbsp;v&nbsp;引用，而继续往下跟踪，就会发现&nbsp;v&nbsp;引用指向的内存空间中又存在指向&nbsp;Object&nbsp;对象的引用。也就是说尽管o&nbsp;引用已经被置空，但是&nbsp;Object&nbsp;对象仍然存在其他的引用，是可以被访问到的，所以&nbsp;GC&nbsp;无法将其释放掉。如果在此循环之后，&nbsp;Object&nbsp;对象对程序已经没有任何作用，那么我们就认为此&nbsp;Java&nbsp;程序发生了内存泄漏。</p>
<p>2.各种连接，数据库连接，网络连接，IO连接等没有显示调用close关闭，不被GC回收导致内存泄露。</p>
<p>3.监听器的使用，在释放对象的同时没有相应删除监听器的时候也可能导致内存泄露。</p>
</div>
</div>
</div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info"><div id="green_channel">
        <a href="javascript:void(0);" id="green_channel_digg" onclick="DiggIt(5522836,cb_blogId,1);green_channel_success(this,&#39;谢谢推荐！&#39;);">好文要顶</a>
            <a id="green_channel_follow" onclick="follow(&#39;30a2bc8a-cd20-e611-9fc1-ac853d9f53cc&#39;);" href="javascript:void(0);">关注我</a>
    <a id="green_channel_favorite" onclick="AddToWz(cb_entryId);return false;" href="javascript:void(0);">收藏该文</a>
    <a id="green_channel_weibo" href="javascript:void(0);" title="分享至新浪微博" onclick="ShareToTsina()"><img src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/icon_weibo_24.png" alt=""></a>
    <a id="green_channel_wechat" href="javascript:void(0);" title="分享至微信" onclick="shareOnWechat()"><img src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/wechat.png" alt=""></a>
</div>
<div id="author_profile">
    <div id="author_profile_info" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/andy-zcx/" target="_blank"><img src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/sample_face.gif" class="author_avatar" alt=""></a>
        <div id="author_profile_detail" class="author_profile_info">
            <a href="http://home.cnblogs.com/u/andy-zcx/">Andy赵</a><br>
            <a href="http://home.cnblogs.com/u/andy-zcx/followees">关注 - 0</a><br>
            <a href="http://home.cnblogs.com/u/andy-zcx/followers">粉丝 - 1</a>
        </div>
    </div>
    <div class="clear"></div>
    <div id="author_profile_honor"></div>
    <div id="author_profile_follow">
                <a href="javascript:void(0);" onclick="follow(&#39;30a2bc8a-cd20-e611-9fc1-ac853d9f53cc&#39;);return false;">+加关注</a>
    </div>
</div>
<div id="div_digg">
    <div class="diggit" onclick="votePost(5522836,&#39;Digg&#39;)">
        <span class="diggnum" id="digg_count">1</span>
    </div>
    <div class="buryit" onclick="votePost(5522836,&#39;Bury&#39;)">
        <span class="burynum" id="bury_count">0</span>
    </div>
    <div class="clear"></div>
    <div class="diggword" id="digg_tips">
    </div>
</div>
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<div class="postDesc">posted @ <span id="post-date">2016-05-24 11:35</span> <a href="http://www.cnblogs.com/andy-zcx/">Andy赵</a> 阅读(<span id="post_view_count">18828</span>) 评论(<span id="post_comment_count">0</span>)  <a href="https://i.cnblogs.com/EditPosts.aspx?postid=5522836" rel="nofollow">编辑</a> <a href="http://www.cnblogs.com/andy-zcx/p/5522836.html#" onclick="AddToWz(5522836);return false;">收藏</a></div>
	</div>
	<script type="text/javascript">var allowComments=true,cb_blogId=286836,cb_entryId=5522836,cb_blogApp=currentBlogApp,cb_blogUserGuid='30a2bc8a-cd20-e611-9fc1-ac853d9f53cc',cb_entryCreatedDate='2016/5/24 11:35:00';loadViewCount(cb_entryId);</script>
	
</div><!--end: topics 文章、评论容器-->
</div><a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="http://www.cnblogs.com/andy-zcx/p/5522836.html#" onclick="return RefreshPage();">刷新页面</a><a href="http://www.cnblogs.com/andy-zcx/p/5522836.html#top">返回顶部</a></div>
<div id="comment_form_container"><div class="login_tips">注册用户登录后才能发表评论，请 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return login(&#39;commentform&#39;);">登录</a> 或 <a rel="nofollow" href="javascript:void(0);" class="underline" onclick="return register();">注册</a>，<a href="http://www.cnblogs.com/">访问</a>网站首页。</div></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="ad_t2"><a href="http://www.ucancode.com/index.htm" target="_blank">【推荐】50万行VC++源码: 大型组态工控、电力仿真CAD与GIS源码库</a><br><a href="http://click.aliyun.com/m/21970/" target="_blank">【阿里云】云计算科技红利邀您免费体验！云服务器、云数据库等35+产品，6个月免费使用！</a><br></div>
<div id="opt_under_post"></div>
<div id="cnblogs_c1" class="c_ad_block"><a href="http://cn.udacity.com/android/?utm_source=cnbolg&amp;utm_medium=referral&amp;utm_campaign=AND03" target="_blank"><img width="300" height="250" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/24442-20170613154413368-1655528381.jpg" alt="Andorid_0613"></a></div>
<div id="under_post_news"><div class="itnews c_ad_block"><b>最新IT新闻</b>:<br> ·  <a href="http://news.cnblogs.com/n/571850/" target="_blank">松下说日本没法搞共享单车 摩拜下月就要去日本试试</a><br> ·  <a href="http://news.cnblogs.com/n/571849/" target="_blank">Twitter又有高管辞职 这次分别是财务与视频业务副总裁</a><br> ·  <a href="http://news.cnblogs.com/n/571848/" target="_blank">领先苹果三星 vivo或成为首个将指纹识别整合进屏幕的厂商</a><br> ·  <a href="http://news.cnblogs.com/n/571847/" target="_blank">中国量子卫星跨越“一步千里”，登顶《科学》封面|潘建伟三箭齐发</a><br> ·  <a href="http://news.cnblogs.com/n/571846/" target="_blank">苹果效仿中国对手：实体店用苹果支付付款可获补贴</a><br>» <a href="http://news.cnblogs.com/" title="IT新闻" target="_blank">更多新闻...</a></div></div>
<div id="cnblogs_c2" class="c_ad_block"><a href="https://www.mtyun.com/activity-anniversary?site=cnblogs&amp;campaign=20170601sales" target="_blank"><img width="468" height="60" src="./深入理解 Java 垃圾回收机制 - Andy赵 - 博客园_files/24442-20170615095125603-13625507.png" alt="美团云"></a></div>
<div id="under_post_kb"><div class="itnews c_ad_block" id="kb_block"><b>最新知识库文章</b>:<br><div id="kb_recent"> ·  <a href="http://kb.cnblogs.com/page/570194/" target="_blank">小printf的故事：什么是真正的程序员？</a><br> ·  <a href="http://kb.cnblogs.com/page/569992/" target="_blank">程序员的工作、学习与绩效</a><br> ·  <a href="http://kb.cnblogs.com/page/569056/" target="_blank">软件开发为什么很难</a><br> ·  <a href="http://kb.cnblogs.com/page/565901/" target="_blank">唱吧DevOps的落地，微服务CI/CD的范本技术解读</a><br> ·  <a href="http://kb.cnblogs.com/page/566523/" target="_blank">程序员，如何从平庸走向理想？</a><br></div>» <a href="http://kb.cnblogs.com/" target="_blank">更多知识库文章...</a></div></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
    fixPostBody();
    setTimeout(function () { incrementViewCount(cb_entryId); }, 50);
    deliverAdT2();
    deliverAdC1();
    deliverAdC2();    
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);   
</script>
</div>


	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->

	<div id="sideBar">
		<div id="sideBarMain">
			
<!--done-->
<div class="newsItem">
<h3 class="catListTitle">公告</h3>
	<div id="blog-news"><div id="profile_block">昵称：<a href="http://home.cnblogs.com/u/andy-zcx/">Andy赵</a><br>园龄：<a href="http://home.cnblogs.com/u/andy-zcx/" title="入园时间：2016-05-23">1年</a><br>粉丝：<a href="http://home.cnblogs.com/u/andy-zcx/followers/">1</a><br>关注：<a href="http://home.cnblogs.com/u/andy-zcx/followees/">0</a><div id="p_b_follow"><a href="javascript:void(0);" onclick="follow(&#39;30a2bc8a-cd20-e611-9fc1-ac853d9f53cc&#39;)">+加关注</a></div></div></div><script type="text/javascript">loadBlogNews();</script>
</div>

			<div id="blog-calendar" style=""><table id="blogCalendar" class="Cal" cellspacing="0" cellpadding="0" title="Calendar">
	<tbody><tr><td colspan="7"><table class="CalTitle" cellspacing="0">
		<tbody><tr><td class="CalNextPrev"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2017/05/01&#39;);return false;">&lt;</a></td><td align="center">2017年6月</td><td class="CalNextPrev" align="right"><a href="javascript:void(0);" onclick="loadBlogCalendar(&#39;2017/07/01&#39;);return false;">&gt;</a></td></tr>
	</tbody></table></td></tr><tr><th class="CalDayHeader" align="center" abbr="日" scope="col">日</th><th class="CalDayHeader" align="center" abbr="一" scope="col">一</th><th class="CalDayHeader" align="center" abbr="二" scope="col">二</th><th class="CalDayHeader" align="center" abbr="三" scope="col">三</th><th class="CalDayHeader" align="center" abbr="四" scope="col">四</th><th class="CalDayHeader" align="center" abbr="五" scope="col">五</th><th class="CalDayHeader" align="center" abbr="六" scope="col">六</th></tr><tr><td class="CalOtherMonthDay" align="center">28</td><td class="CalOtherMonthDay" align="center">29</td><td class="CalOtherMonthDay" align="center">30</td><td class="CalOtherMonthDay" align="center">31</td><td align="center">1</td><td align="center">2</td><td class="CalWeekendDay" align="center">3</td></tr><tr><td class="CalWeekendDay" align="center">4</td><td align="center">5</td><td align="center">6</td><td align="center">7</td><td align="center">8</td><td align="center">9</td><td class="CalWeekendDay" align="center">10</td></tr><tr><td class="CalWeekendDay" align="center">11</td><td align="center">12</td><td align="center">13</td><td align="center">14</td><td align="center">15</td><td align="center">16</td><td class="CalTodayDay" align="center">17</td></tr><tr><td class="CalWeekendDay" align="center">18</td><td align="center">19</td><td align="center">20</td><td align="center">21</td><td align="center">22</td><td align="center">23</td><td class="CalWeekendDay" align="center">24</td></tr><tr><td class="CalWeekendDay" align="center">25</td><td align="center">26</td><td align="center">27</td><td align="center">28</td><td align="center">29</td><td align="center">30</td><td class="CalOtherMonthDay" align="center">1</td></tr><tr><td class="CalOtherMonthDay" align="center">2</td><td class="CalOtherMonthDay" align="center">3</td><td class="CalOtherMonthDay" align="center">4</td><td class="CalOtherMonthDay" align="center">5</td><td class="CalOtherMonthDay" align="center">6</td><td class="CalOtherMonthDay" align="center">7</td><td class="CalOtherMonthDay" align="center">8</td></tr>
</tbody></table></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"><div id="sidebar_search" class="sidebar-block">
<div id="sidebar_search" class="mySearch">
<h3 class="catListTitle">搜索</h3>
<div id="sidebar_search_box">
<div id="widget_my_zzk" class="div_my_zzk"><input type="text" id="q" onkeydown="return zzk_go_enter(event);" class="input_my_zzk">&nbsp;<input onclick="zzk_go()" type="button" value="找找看" id="btnZzk" class="btn_my_zzk"></div>
<div id="widget_my_google" class="div_my_zzk"><input type="text" name="google_q" id="google_q" onkeydown="return google_go_enter(event)" class="input_my_zzk">&nbsp;<input onclick="google_go()" type="button" value="谷歌搜索" class="btn_my_zzk"></div>
</div>
</div>

</div><div id="sidebar_shortcut" class="sidebar-block">
<div class="catListLink">
<h3 class="catListTitle">常用链接</h3>
<ul>
<li><a href="http://www.cnblogs.com/andy-zcx/p/" title="我的博客的随笔列表">我的随笔</a></li><li><a href="http://www.cnblogs.com/andy-zcx/MyComments.html" title="我发表过的评论列表">我的评论</a></li><li><a href="http://www.cnblogs.com/andy-zcx/OtherPosts.html" title="我评论过的随笔列表">我的参与</a></li><li><a href="http://www.cnblogs.com/andy-zcx/RecentComments.html" title="我的博客的评论列表">最新评论</a></li><li><a href="http://www.cnblogs.com/andy-zcx/tag/" title="我的博客的标签列表">我的标签</a></li>
</ul>
<div id="itemListLin_con" style="display:none;">
<ul>

</ul>
</div>
</div></div><div id="sidebar_toptags" class="sidebar-block"></div><div id="sidebar_categories">
<div id="sidebar_postarchive" class="catListPostArchive sidebar-block">
<h3 class="catListTitle">随笔档案</h3>

<ul>

<li><a id="CatList_LinkList_0_Link_0" href="http://www.cnblogs.com/andy-zcx/archive/2016/06.html">2016年6月 (1)</a> </li>

<li><a id="CatList_LinkList_0_Link_1" href="http://www.cnblogs.com/andy-zcx/archive/2016/05.html">2016年5月 (1)</a> </li>

</ul>

</div>

</div><div id="sidebar_recentcomments" class="sidebar-block"><div id="recent_comments_wrap" style="display: none;">
<div class="catListComment">
<h3 class="catListTitle">最新评论</h3>

	<div id="RecentCommentsBlock"></div>
</div>
</div></div><div id="sidebar_topviewedposts" class="sidebar-block"><div id="topview_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">阅读排行榜</h3>
	<div id="TopViewPostsBlock"><ul><li><a href="http://www.cnblogs.com/andy-zcx/p/5522836.html">1. 深入理解 Java 垃圾回收机制(18827)</a></li><li><a href="http://www.cnblogs.com/andy-zcx/p/5569297.html">2. 安卓自定义View进阶: 画布操作(12)</a></li></ul></div>
</div>
</div></div><div id="sidebar_topcommentedposts" class="sidebar-block"><div id="topfeedback_posts_wrap" style="display: none;">
<div class="catListFeedback">
<h3 class="catListTitle">评论排行榜</h3>
	<div id="TopFeedbackPostsBlock"></div>
</div>
</div></div><div id="sidebar_topdiggedposts" class="sidebar-block"><div id="topdigg_posts_wrap">
<div class="catListView">
<h3 class="catListTitle">推荐排行榜</h3>
<div id="TopDiggPostsBlock"><ul><li><a href="http://www.cnblogs.com/andy-zcx/p/5522836.html">1. 深入理解 Java 垃圾回收机制(1)</a></li></ul></div>
</div></div></div></div><script type="text/javascript">loadBlogSideColumn();</script>
			</div>
			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		
<!--done-->
Copyright ©2017 Andy赵
	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


</body></html>